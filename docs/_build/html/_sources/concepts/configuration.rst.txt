.. _configuration:

Configuration
=============

Overview
--------

The configuration file defines the all the components of pipeline such as: polices, nature language
understanding (NLU), Natural language generator(NLG), Dialogue State Tracker(DST), State Featurezier (SF), User Simulator (US),...
that the system will use to run pipeline.
Here is an example of configuration run with comet.

.. code-block:: yaml

    GENERAL:
      interaction_mode: simulation
      models_path: ./models/BabeShop

      experience_logs:
        save: True
        load: False
        path: assets/BabeShop/v0.2.0/records/exp_dialogues.pkl
        test_path: null
        eval_path: assets/BabeShop/v0.2.0/records/test_fake_dialogues.pkl

      data:
        ontology: data/babe_ontology.json

        database:
          package: src.babe_database
          class: JSONDataBase
          arguments:
            path: data/babe_database.json

        domain: data/babe_domain.json

    DIALOGUE:
      num_dialogues: 200

      initiative: system
      show_act: True

    AGENT:
      role: system
      max_turns: 15
      train_interval: 200
      save_interval: 10

      DM:
        package: comet.agent.core.dialogue_manager.dialogue_manager
        class: DialogueManager

      SynonymMapper:
        package: comet.agent.synonym_mapper
        class: SynonymMapper
        arguments:
          path: models/babe_shop/nlg/auto_system_template_nlg.json

      DS:
        package: comet.agent.core.state
        class: DialogueState

      SF:
        package: comet.agent.core.dialogue_featurizers.state_featurizer
        class: StateFeaturizer
      DST:
        package: src.babe_dst
        class: BabeDialogueStateTracker
      WP:
        package: src.babe_warm_up_policy
        class: BabeWarmUpPolicy
      POLICY:
        policy_0:
          package: comet.agent.core.dialogue_policy.reinforcement_learning.dqn
          class: VanillaDQN
          arguments:
            WP: auto
            WUS: auto
            ontology: auto
            database: auto
            domain: auto
            train: True
            algorithm:
              training_epoch: 300
              mini_batch_size: null
              gamma: 0.9
            net:
              type: MLPNet
              hid_layers: [100]
              hid_layers_activation: relu
              clip_grad_val: null
              lr_scheduler_spec:
                name: StepLR
                step_size: 1000
                gamma: 0.999
              optim_spec:
                name: Adam
                lr: 0.001
              loss_spec:
                name: MSELoss
              gpu: False


            policy_path: models/camrest_policy/sys/sys_reinforce
      NLG:
        package: src.babe_template_nlg
        class: BabeTemplateNLG

      NLU:
        package: comet.agent.nlu.dummy_nlu
        class: DummyNLU
    USER_SIMULATOR:
      package: src.user_simulator.agenda_based_us
      class: FakeUS
      arguments:
        patience: 5
        NLG:
          package: src.babe_template_nlg
          class: BabeTemplateNLG
          arguments:
            template_path: applications/babe_sale_bot/data/nlg_usr_template.json
            role: usr

GENERAL
-------

- ``interaction_mode``:  Use to configure the way to interface with agent. Currently we have 2 option

    - ``text``: Interface with agent by usr message
    - ``simulation``: interface with agent by user simulator. To use this, US must be configured.
- ``models_path``:  The default base model directory. The agent will save and load all model weights in this directory if it's not provided in argument of each component.

- ``experience_logs``:  Handle internal experience logs. These are logs produced by the dialogue Recorder (under utilities) and contain information about what has happened during the dialogue(s). Agents use these logs as data for training.

    - ``save(bool)``: if True, the agent will save the dialogue records into ``path``
    - ``load(bool)``: if true, the agent will load the dialogue recoreds from ``path``
    - ``path(Text)``: Where to save or load dialogues records.
    - ``eval_path(Text)``: Where to load the data for validate training. Use only for policy training
    - ``test_path(Text)``: A path file to load test data for evaluation model. Use only for policy evaluation
- ``data``: These are data arguments and are added to the arguments of each module of each agent. In this template example we provide the ontology, database, and domain that every module needs.

    - ``ontology``: The path to the ontology. Accepted `.json` or `.yaml` file. See *data/babe_domain.json* for json database example
    - ``database``: The module configure for the database .db file. json, sql, neo4j. See data/babe_domain.json for json database example
    - ``domain``: The domain file path. Excepted `.yaml` and `.json` format. See data/babe_domain.json for example.

DIALOGUE
--------

- ``num_dialogues``: How many dialogue to run for
- ``initiative``: Which role has the initiative (speaks first): ``system`` or ``user``

AGENT
-----

-``role``: The role of the agent: ``system`` or ``user``.
-``max_turns``: When the conversation reach max_turns, agent will terminated the conversation
-``train_interval(int)``: This configure use only for online training mode. For example: ``train_interval``= 100 means after 100 dialogues, agent will get the recorded dialogues to train for each component.
-``save_interval(int)``: if ``save_interval``=100 mean after each 100 dialogues, the model of each component will be saved. Only use for training mode.

The component configuration (Ex: Dialogue manager, dialogue state tracker, nature language generator,
policy ...). Each component will configure following format

.. code-block:: yaml

    # Configure for dialogue managerment
    DM:
        package: comet.agent.core.dialogue_manager.dialogue_manager
        class: DialogueManager

    # Configure for synnonym mapper component. Optional
    SynonymMapper:
        package: comet.agent.synonym_mapper
        class: SynonymMapper
        arguments:
          path: models/babe_shop/nlg/auto_system_template_nlg.json

    # Configure for dialoguge state component
    DS:
        package: comet.agent.core.state
        class: DialogueState
    # Configure for dialogue state tracker
    DST:
        package: src.babe_dst
        class: BabeDialogueStateTracker
    ...

.. _user_simulator_config:

USER_SIMULATOR
--------------

This where will configure for user simulator. It similar with `agent component` configuration. For example

.. code-block:: yaml

    USER_SIMULATOR:
      package: src.user_simulator.agenda_based_us
      class: AgendaBaseUS
      arguments:
        patience: 5

        NLG:
          package: src.babe_template_nlg
          class: BabeTemplateNLG
          arguments:
            template_path: applications/babe_sale_bot/data/nlg_usr_template.json
            role: usr
        algorithm:
            slot_confuse_prob: 0.1
            value_confuse_prob: 0.2
            pop_distribution: [0.8, 0.15, 0.05]

**Arguments**:

- ``ontology``: This is an ontology instance (If not provided, get by ontology in GENERAL)
- ``database``: This is an database instance (If not provided, get by database in GENERAL)
- ``NLU``: The natural language understanding for user simulator
- ``NLG``: The natural language generator for user simulator
- ``goals_path``(Optional): If goals_path provided, we will get goal from file instead of generate from :class:`GoalGenerator <comet.environment.user_simulator.goal.GoalGenerator>`
- ``value_weights_path`` (Option): With this parameter, we will select attribute based on the distribution of each product or each attributes.

- ``algorithm``: a dictionary containing:

    - ``required_slot``: If this is provided, we will geneate a goal which is always contains this slot. For example: ``object_type``, ``ticket`` ... depending on your application
    - ``max_turns``: if number of turn greater than ``max_turn`` user will be terminated the conversation
    - ``patience``: Stop after <patience> consecutive identical inputs received
    - ``slot_confuse_prob``: probability by which the error model will alter the output dact slot
    - ``value_confuse_prob``: probability by which the error model will alter the output dact value
    - ``pop_distribution``: pop 1 act with 0.8 probability, 2 acts with 0.15, etc.

POLICIES
--------
The assistant uses policies to decide which action to take at each step in a conversation.
There are machine-learning and rule-based policies that your assistant can use in tandem.

You can customize the policies your assistant uses by specifying the policies key in your
project's config.yml. There are different policies to choose from, and you can include multiple
policies in a single configuration. Here's an example of what a list of policies might look like

.. code-block:: yaml

    POLICY:
        policy_0:
          package: src.babe_warm_up_policy
          class: BabeWarmUpPolicy
          arguments:
            algorithm:
                priority: 3
        policy_1:
          package: comet.agent.core.dialogue_policy.supervised_learning.svm_classifier_policy
          class: SVMPolicy
          arguments:
            WP: auto
            train: 0
            algorithm:
                priority: 2
        policy_2:
          package: comet.agent.core.dialogue_policy.supervised_learning.vanilla_classifier_policy
          class: VanillaPolicy
          arguments:
            WP: auto
            train: 0
            algorithm:
                priority: 1


Policy Priority
"""""""""""""""
In the case that two policies predict with equal confidence or greater than a policy threshold, the
priority of the policies is considered. Comet have default priorities that are set to ensure the
expected outcome in the case of a tie. They look like this, where higher numbers have higher priority:

6 - BabeHandcraftPolicy

3 - SVMPolicy

1 - VanillaPolicy

Policy algorithms
"""""""""""""""""

BabeHandcraftPolicy
"""""""""""""""""""

**Configuration**

.. code-block:: yaml

    POLICY:
        policy_0:
          package: src.babe_warm_up_policy
          class: BabeWarmUpPolicy
          arguments:
            algorithm:
                priority: 3

**Arguments**

- ``priority``: the priority of this policy

SVMPolicy
"""""""""

**Configuration**

.. code-block:: yaml

    POLICY:
        policy_0:
            package: comet.agent.core.dialogue_policy.supervised_learning.svm_classifier_policy
            class: SVMPolicy
            arguments:
                algorithm:
                    priority: 3
**Arguments**

- ``SF``: State feature module
- ``training``: If ``True`` it will train the policy with train data provided in ``GENERAL`` section
- ``testing``: If ``True`` it will test the policy model with test data provided in ``GENERAL`` section
- ``algorithm``: a dictionary of

    - ``priority``: the priority of this policy
VanillaPolicy
"""""""""""""

**Configuration**

.. code-block:: yaml

    POLICY:
        policy_0:
            package: comet.agent.core.dialogue_policy.supervised_learning.vanilla_classifier_policy
            class: VanillaPolicy
            arguments:
                algorithm:
                    priority: 3
**Arguments**

- ``SF``: State feature module
- ``training``: If ``True`` it will train the policy with train data provided in ``GENERAL`` section
- ``testing``: If ``True`` it will test the policy model with test data provided in ``GENERAL`` section

- ``algorithm``: a dictionary of

    - ``priority``: the priority of this policy
    - ``training_epoch``: Number of epoch to train
    - ``learning_rate``: The learning rate
    - ``batch_size``: Batch size
    - ``momentum``: The momemtum
    - ``confidence_threshold``: The confidence thresh, use to select best option form multi policies
LSTMPolicy
""""""""""

**Configuration**

.. code-block:: yaml

    POLICY:
        policy_0:
            package: comet.agent.core.dialogue_policy.supervised_learning.lstm_classifier_policy
            class: LSTMPolicy
            arguments:
                algorithm:
                    training_epoch: 100
**Arguments**

- ``SF``: State feature module
- ``training``: If ``True`` it will train the policy with train data provided in ``GENERAL`` section
- ``testing``: If ``True`` it will test the policy model with test data provided in ``GENERAL`` section

- ``algorithm``: a dictionary of

    - ``priority``: the priority of this policy
    - ``training_epoch``: Number of epoch to train
    - ``learning_rate``: The learning rate
    - ``batch_size``: Batch size
    - ``momentum``: The momemtum
    - ``hidden_dim``: number of hidden layer
    - ``num_states``: number of history states use for featurize
    - ``confidence_threshold``: The confidence thresh, use to select best option form multi policies

Natural language understanding(NLU)
----------------------------------

Natural language understanding make up your NLU pipeline and work sequentially to process user input
into structured output. There are components for entity extraction, for intent classification,
response selection, pre-processing, and more.

With NLU component we use denver core for this task. Fore more detail, feel free to visit: `Denver Core <https://nlp.pages.gitlab.ftech.ai/research/denver_core/index.html>`_

ULMFITClassifier and FlairSequenceTagger
""""""""""""""""""""""""""""""""""""""""

**Configuration**

.. code-block:: yaml

    AGENT:
        ...
        NLU:
        package: comet.agent.nlu.denver_flair
        class: DenverFlair
        arguments:
            SynonymMapper: auto
            ontology: auto

**Arguments**

- ``SynonymMapper``: SynonymMapper module (Optional)
- ``ontology``: The ontology instance
- ``intent_threshold``: confidence threshold
- ``model_path_ic``: The path of IC model. Use default path of not provide
- ``model_path_ner``: The path of NER model. Use default path of not provide

OneNet
""""""

**Configuration**

.. code-block:: yaml

    AGENT:
        ...
        NLU:
        package: comet.agent.nlu.denver_onenet
        class: DenverOneNet
        arguments:
            SynonymMapper: auto
            ontology: auto

**Arguments**

- ``SynonymMapper``: SynonymMapper module (Optional)
- ``ontology``: The ontology instance
- ``intent_threshold``: confidence threshold
- ``model_path``: The path of OneNet model. Use default path of not provide
- ``training``: If ``True`` it will train the NLU component with train data provided in ``train_args``
- ``testing``: If ``True`` it will test the NLU component with train data provided in ``train_args``
- ``train_args``: a dictionary containing data and all hyper-parameter to train with denver

.. _nlg:

Natural language generator(NLG)
-------------------------------

**Configuration**

.. code-block:: yaml

    AGENT:
        ...
        NLU:
            package: comet.agent.nlu.denver_flair
            class: DenverFlair
            arguments:
                SynonymMapper: auto
                ontology: auto

**Arguments**

- ``template_path``: the path of nlg template. If not provided, system will get the NLG default template path (Optional)
- ``product_key``: The name of product type. For example: ``object_type``, ``ticket``, ``weather``.... (Optional)
- ``role``: NLG for ``system`` or ``user``
- ``mode``: ``auto`` or ``manual``. Currently we only support ``auto`` mode. See :ref:`NLG section <build_nlg_template>` to know how to prepare NLG template with this mode.
